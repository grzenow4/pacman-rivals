@startuml
skinparam classAttributeIconSize 0

class GameEngine {
    -sf::RenderWindow _window
    -TextureHolder _texture_holder
    -ScreenName _current_screen
    -MenuScreen _menu
    -LobbyScreen _lobby
    -GameScreen _game
    -BetweenRoundsScreen _between_rounds;

    -void input()
    -void update(float dt_as_seconds);
    -void draw();
    +GameEngine();
    +void run();
}

GameEngine "1" *-- "1" TextureHolder : contains

class TextureHolder << singleton >> {
    -std::map<std::string, sf::Texture> _textures
    -{static} TextureHolder* _instance

    +TextureHolder()
    +{static} sf::Texture & GetTexture(const std::string &filename)
}

GameEngine "1" --> "1" ScreenName : uses

enum ScreenName {
    +MENU
    +LOBBY
    +GAME
    +BETWEEN_ROUNDS
}

GameEngine "1" *-- "4" Screen : owns
Screen "1" --> "1" ScreenName : uses

abstract class Screen {
    #sf::RenderWindow* _window
    #ScreenName* _current_screen

    +Screen()
    +Screen(sf::RenderWindow* window, ScreenName* current_screen)
    +{abstract} void input()
    +{abstract} void update(float dt_as_seconds)
    +{abstract} void draw()
    +{abstract} ~Screen()
}

GameEngine "1" *-- "1" MenuScreen : owns
Screen <|-- MenuScreen

class MenuScreen {
    -sf::View _view
    -sf::Font _font
    -{static} const unsigned int OPTIONS_NUM
    -{static} const float SPACE_BETWEEN
    -std::vector<sf::Text> _options
    -unsigned int _current_option

    +MenuScreen()
    +MenuScreen(sf::RenderWindow* window, ScreenName* current_screen)
    +void initialise()
    +void input()
    +void update(float dt_as_seconds)
    +void draw()
}

GameEngine "1" *-- "1" LobbyScreen : owns
Screen <|-- LobbyScreen
MenuScreen "1" --> "1" LobbyScreen : turns on
LobbyScreen "1" --> "1" MenuScreen : comes back to

class LobbyScreen {
    -sf::View _view
    -sf::Font _font
    -sf::Text _nicknames_info
    -sf::Text _colors_info
    -sf::Text _controls_info
    -{static} unsigned int OPTIONS_NUM
    -{static} const float SPACE_BETWEEN
    -std::vector<sf::Text> _player_numbers
    -unsigned int _current_options = 0
    -GameOptions _game_options
    -std::vector<PlayerOptions> _player_options

    +LobbyScreen()
    +LobbyScreen(sf::RenderWindow* window, ScreenName* current_screen)
    +void initialise()
    +void input()
    +void update(float dt_as_seconds)
    +void draw()
    +std::vector<PlayerInfo> getPlayerInfos()
    +unsigned int getRounds()
}

GameEngine "1" *-- "1" GameScreen : owns
Screen <|-- GameScreen
LobbyScreen "1" --> "1" GameScreen : prepares
GameScreen "1" --> "1" MenuScreen : turns on after the game

class GameScreen {
    -sf::View _main_view
    -LevelManager _level_manager
    -std::shared_ptr<Map> _grid
    -std::vector<std::shared_ptr<Ghost>> _ghosts
    -std::vector<PlayerInfo> _player_infos
    -std::vector<std::shared_ptr<Pacman>> _pacmans
    -std::vector<PlayerInputHandler> _player_input_handlers
    -std::unordered_map<int, Coin> _coins
    -bool _new_map_needed = false
    -unsigned int _players_num = 0
    -unsigned int _rounds_left = 0

    -void loadNewMap()
    -void handleCollisionsPC()
    -void handleCollisionsPG()
    -unsigned int alivePlayers() const
    -void rewardWinner()
    +GameScreen()
    +GameScreen(sf::RenderWindow* window, ScreenName* current_screen)
    +void initialise(std::vector<PlayerInfo> player_infos, unsigned int rounds)
    +void input()
    +void update(float dt_as_seconds)
    +void draw()
    +const std::vector<PlayerInfo> & getPlayerInfos()
}

GameEngine "1" *-- "1" BetweenRoundsScreen : owns
Screen <|-- BetweenRoundsScreen
GameScreen "1" --> "1" BetweenRoundsScreen : turns on after each round

class BetweenRoundsScreen {
    -sf::View _view;
    -std::vector<ScorePrinter> _score_printers

    +BetweenRoundsScreen()
    +BetweenRoundsScreen(sf::RenderWindow* window, ScreenName* current_screen)
    +void initialise(const std::vector<PlayerInfo> & player_infos)
    +void input()
    +void update(float dt_as_seconds)
    +void draw()
}

@enduml