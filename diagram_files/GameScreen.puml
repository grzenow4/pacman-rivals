@startuml
skinparam classAttributeIconSize 0

class GameScreen {
    -sf::View _main_view
    -LevelManager _level_manager
    -std::shared_ptr<Map> _grid
    -std::vector<std::shared_ptr<Ghost>> _ghosts
    -std::vector<PlayerInfo> _player_infos
    -std::vector<std::shared_ptr<Pacman>> _pacmans
    -std::vector<PlayerInputHandler> _player_input_handlers
    -std::unordered_map<int, Coin> _coins
    -bool _new_map_needed = false
    -unsigned int _players_num = 0
    -unsigned int _rounds_left = 0

    -void loadNewMap()
    -void handleCollisionsPC()
    -void handleCollisionsPG()
    -unsigned int alivePlayers() const
    -void rewardWinner()
    +GameScreen()
    +GameScreen(sf::RenderWindow* window, ScreenName* current_screen)
    +void initialise(std::vector<PlayerInfo> player_infos, unsigned int rounds)
    +void input()
    +void update(float dt_as_seconds)
    +void draw()
    +const std::vector<PlayerInfo> & getPlayerInfos()
}

GameScreen "1" --> "2..4" PlayerInfo : updates

class PlayerInfo {
    -std::string _nickname
    -std::string _color
    -std::string _control
    -unsigned int _rounds_won

    +PlayerInfo()
    +PlayerInfo(std::string nickname, std::string color, std::string control)
    +std::string getNickname() const
    +std::string getColor() const
    +std::string getControl() const
    +void newWin()
    +unsigned int getRoundsWon() const
}

GameScreen "1" --> "2..4" PlayerInputHandler : uses

class PlayerInputHandler {
    -std::shared_ptr<Pacman> _pacman
    -bool _uses_arrows
    -bool _uses_WASD
    -int _controller = -1

    -void handleArrows()
    -void handleWASD()
    -void handleController()
    +PlayerInputHandler()
    +PlayerInputHandler(std::shared_ptr<Pacman> pacman, std::string control)
    +void input()
}

enum Direction {
    +LEFT = 0
    +RIGHT = 1
    +UP = 2
    +DOWN = 3
    +STOP = 4
}

Character "1" --> "1" Direction : uses

abstract class Character {
    #float _speed = 100
    #sf::Sprite _sprite
    #std::shared_ptr<Map> _map
    #Direction _direction

    #void move(float dt_as_seconds)
    #sf::Vector2i positionOfNewTile(sf::Vector2i tile) const
    #sf::Vector2i positionOfTileInNewDirection(sf::Vector2i new_tile, Direction _new_direction) const
    #bool reachedNewTile(float dt_as_seconds) const
    #void correct()
    #void correctRight()
    #void correctLeft()
    #void correctUp()
    #void correctDown()
    +Character()
    +Character(sf::Sprite sprite, std::shared_ptr<Map> map)
    +sf::FloatRect getPosition() const
    +const sf::Sprite &getSprite() const
    +virtual void update(float dt_as_seconds)
    +virtual ~Character()
}

Character <|-- Pacman
PlayerInputHandler "1" --> "1" Pacman : changes
GameScreen "1" *-- "2..4" Pacman : owns

class Pacman {
    -bool _is_dead
    -Direction _new_direction

    -bool turningBack() const
    +Pacman(std::shared_ptr<Map> map, float start_tile_x, float start_tile_y)
    +void changeColor(const std::string & color)
    +void update(float dt_as_seconds)
    +void turnLeft()
    +void turnRight()
    +void turnUp()
    +void turnDown()
    +void die()
    +bool isDead() const
}

Character <|-- Ghost
GameScreen "1" *-- "*" Ghost : owns
Ghost "1" --> "1" Pacman : kills

abstract class Ghost {
    #Character::Direction getOppositeDirection() const
    #sf::Vector2i getUpTile() const
    #sf::Vector2i getDownTile() const
    #sf::Vector2i getLeftTile() const
    #sf::Vector2i getRightTile() const
    +~Ghost()
}

Ghost <|-- CycleGhost

class CycleGhost {
    -size_t _cycle_index = 0
    -std::vector<int> _directions

    +CycleGhost(std::shared_ptr<Map> map, int start_tile_x, int start_tile_y, std::vector<int> directions)
    +void update(float dt_as_seconds)
}

Ghost <|-- LinearGhost

class LinearGhost {
    +LinearGhost(std::shared_ptr<Map> map, int start_tile_x, int start_tile_y, int direction)
    +void update(float dt_as_seconds)
}

Ghost <|-- RandomGhost

class RandomGhost {
    -Character::Direction randNewDirection()
    +RandomGhost(std::shared_ptr<Map> map, int start_tile_x, int start_tile_y, int direction)
    +void update(float dt_as_seconds)
}

GameScreen "1" *-- "1" LevelManager : uses
LevelManager "1" --> "2..4" Pacman : creates
LevelManager "1" --> "*" Ghost : creates
LevelManager "1" --> "1" Map : creates

class LevelManager {
    -std::shared_ptr<Map> _grid
    -std::vector<std::shared_ptr<Ghost>> _ghosts
    -std::vector<std::shared_ptr<Pacman>> _pacmans

    -void loadNewGrid()
    -void loadNewGhosts()
    -void loadNewPlayers()
    +LevelManager()
    +std::shared_ptr<Map> getGrid()
    +std::vector<std::shared_ptr<Ghost>> &getGhosts()
    +std::vector<std::shared_ptr<Pacman>> &getPlayers()
    +void loadNewLevel()
    +void initialise()
}

GameScreen "1" *-- "1" Map : owns
Pacman "2..4" --> "1" Map : walk on

class Map {
    -std::vector<std::vector<Tile>> _tiles

    +Map()
    +void setTile(int i, int j, int type)
    +std::vector<std::vector<Tile>> &getTiles()
}

Map "1" *-- "600" Tile : consists of

class Tile {
    -int _type
    -sf::Sprite _sprite

    +Tile(int type)
    +void setPosition(int i, int j)
    +const sf::Sprite &getSprite() const
    +bool isWall() const
}

GameScreen "1" *-- "*" Coin : owns
Coin "*" --> "1" Map : lie on
Pacman "1" --> "*" Coin : collects

class Coin {
    -sf::Sprite _sprite
    -bool _is_taken = false

    +Coin()
    +Coin(float tile_x, float tile_y)
    +void Take()
    +bool isTaken() const
    +const sf::Sprite &getSprite() const
    +sf::FloatRect getPosition() const
}

@enduml