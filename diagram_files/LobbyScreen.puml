@startuml
skinparam classAttributeIconSize 0

class LobbyScreen {
    -sf::View _view
    -sf::Font _font
    -sf::Text _nicknames_info
    -sf::Text _colors_info
    -sf::Text _controls_info
    -{static} unsigned int OPTIONS_NUM
    -{static} const float SPACE_BETWEEN
    -std::vector<sf::Text> _player_numbers
    -unsigned int _current_options = 0
    -GameOptions _game_options
    -std::vector<PlayerOptions> _player_options

    +LobbyScreen()
    +LobbyScreen(sf::RenderWindow* window, ScreenName* current_screen)
    +void initialise()
    +void input()
    +void update(float dt_as_seconds)
    +void draw()
    +std::vector<PlayerInfo> getPlayerInfos()
    +unsigned int getRounds()
}

LobbyScreen "1" *-- "3..5" Options : owns

abstract class Options {
    #sf::RenderWindow* _window
    #{static} unsigned int _current_selector

    +Options() = default
    +Options(sf::RenderWindow* window) : _window(window)
    +{abstract} void input(const sf::Event &event)
    +{abstract} void update(float dt_as_seconds)
    +{abstract} void draw()
    +{abstract} ~Options()
}

Options "1" *-- "2..3" Selector : owns

abstract class Selector {
    #sf::RenderWindow* _window
    #{static} unsigned int _next_available_selector_id
    #{static} unsigned int _current_selector_id
    #unsigned int _my_id

    +Selector()
    +Selector(sf::RenderWindow* window)
    +{abstract} void input(const sf::Event &event)
    +{abstract} void update(float dt_as_seconds)
    +{abstract} void draw()
    +{abstract} ~Selector()
}

Options <|-- GameOptions
LobbyScreen "1" *-- "1" GameOptions

class GameOptions {
    -PlayersSelector _players_selector
    -RoundsSelector _rounds_selector
    -ControllerChecker _controller_checker

    +GameOptions()
    +GameOptions(sf::RenderWindow* window)
    +void input(const sf::Event &event)
    +void update(float dt_as_seconds)
    +void draw()
    +unsigned int getNumberOfPlayers()
    +unsigned int getNumberOfRounds()
}

GameOptions "1" *-- "1" ControllerChecker

class ControllerChecker {
    -sf::RenderWindow* _window
    -sf::Font _font
    -sf::Text _info
    -std::vector<std::string> _controller_name
    -std::vector<sf::Text> _controller_info
    -{static} const unsigned int CONTROLLERS_NUM
    -std::vector<float> _seconds_since_last_click
    -{static} const float _SECONDS_OF_CLICK_ANIMATION

    +ControllerChecker()
    +ControllerChecker(sf::RenderWindow* window)
    +void input()
    +void update(float dt_as_seconds)
    +void draw()
}

Selector <|-- PlayersSelector
GameOptions "1" *-- "1" PlayersSelector

class PlayersSelector {
    -unsigned int _current_players = 2
    -sf::Text _number
    -sf::Text _info
    -sf::Font _font
    -sf::Sprite _border
    -ButtonAD _A
    -ButtonAD _D

    +PlayersSelector()
    +PlayersSelector(sf::RenderWindow* window)
    +void input(const sf::Event &event)
    +void update(float dt_as_seconds)
    +void draw()
    +unsigned int getCurrentPlayers() const
}

Selector <|-- RoundsSelector
GameOptions "1" *-- "1" RoundsSelector

class RoundsSelector {
    -unsigned int _current_rounds = 5
    -sf::Text _number
    -sf::Text _info
    -sf::Font _font
    -sf::Sprite _border
    -ButtonAD _A
    -ButtonAD _D

    +RoundsSelector()
    +RoundsSelector(sf::RenderWindow* window)
    +void input(const sf::Event &event)
    +void update(float dt_as_seconds)
    +void draw()
    +unsigned int getCurrentRounds() const
}

Options <|-- PlayerOptions
LobbyScreen "1" *-- "2..4" PlayerOptions

class PlayerOptions {
    -NickSelector _nick_selector
    -ColorSelector _color_selector
    -ControlSelector _control_selector

    +PlayerOptions(unsigned int player, sf::RenderWindow* window)
    +void input(const sf::Event &event)
    +void update(float dt_as_seconds)
    +void draw()
    +void freeOptions()
    +PlayerInfo getPlayerInfo()
}

Selector <|-- ColorSelector
PlayerOptions "1" *-- "1" ColorSelector

class ColorSelector {
    -unsigned int _player
    -std::string _current_color = "none"
    -unsigned int _current_index = 0
    -{static} std::vector<bool> _available_colors
    -std::vector<std::string> _pac_man_options
    -sf::Sprite _color
    -sf::Font _font
    -sf::Sprite _border
    -ButtonAD _A
    -ButtonAD _D

    +ColorSelector()
    +ColorSelector(sf::RenderWindow* window, unsigned int _player)
    +void input(const sf::Event &event)
    +void update(float dt_as_seconds)
    +void draw()
    +std::string getCurrentColor() const
    +{static} void clearState()
    +void freeCurrentColor() const
}

Selector <|-- ControlSelector
PlayerOptions "1" *-- "1" ControlSelector

class ControlSelector {
    -unsigned int _player
    -std::string _current_control = "none"
    -unsigned int _current_index = 0
    -std::vector<std::string> _control_options
    -{static} std::vector<bool> _available_controls
    -sf::Text _control
    -sf::Font _font
    -sf::Sprite _border
    -ButtonAD _A
    -ButtonAD _D

    +ControlSelector()
    +ControlSelector(sf::RenderWindow* window, unsigned int player)
    +void input(const sf::Event &event)
    +void update(float dt_as_seconds)
    +void draw()
    +std::string getCurrentControl() const
    +{static} void clearState()
    +void freeCurrentControl() const
}

Selector <|-- NickSelector
PlayerOptions "1" *-- "1" NickSelector

class NickSelector {
    -unsigned int _player
    -std::string _current_nick
    -sf::Text _nickname
    -sf::Font _font
    -sf::Sprite _border

    +NickSelector()
    +NickSelector(sf::RenderWindow* window, unsigned int player)
    +void input(const sf::Event &event)
    +void update(float dt_as_seconds)
    +void draw()
    +std::string getCurrentNick() const
}

PlayersSelector "1" o-- "2" ButtonAD : uses
RoundsSelector "1" o-- "2" ButtonAD : uses
ColorSelector "1" o-- "2" ButtonAD : uses
ControlSelector "1" o-- "2" ButtonAD : uses

class ButtonAD {
    -sf::Text _letter
    -sf::Font _font
    -sf::Sprite _border
    -float _seconds_since_last_click
    -{static} float _seconds_of_click_animation

    +ButtonAD()
    +ButtonAD(sf::Vector2f position, bool isA)
    +void click()
    +bool isClicked()
    +void update(float dt_as_seconds)
    +void draw(sf::RenderWindow* window)
}

LobbyScreen "1" --> "2..4" PlayerInfo : sets up

class PlayerInfo {
    -std::string _nickname
    -std::string _color
    -std::string _control
    -unsigned int _rounds_won

    +PlayerInfo()
    +PlayerInfo(std::string nickname, std::string color, std::string control)
    +std::string getNickname() const
    +std::string getColor() const
    +std::string getControl() const
    +void newWin()
    +unsigned int getRoundsWon() const
}

@enduml